import React, { useEffect, useState } from "react";
import { useNavigate } from 'react-router-dom';
import { useMyOrders } from "../../hooks/useMyOrders";
import { useTelegram } from "../../hooks/useTelegram";
import 'bootstrap/dist/css/bootstrap.min.css';
import Header from '../Header/Header';
import { IoArrowBack, IoRefresh, IoEye, IoCreate, IoCall, IoLocation, IoPerson, IoCalendar, IoCard, IoCheckmarkCircle, IoTimeOutline } from 'react-icons/io5';
import { BsCardText } from 'react-icons/bs';

const OwnOrders = () => {
    const { isLoading, orders, error, myOrders, refetchOrders } = useMyOrders();
    const { user } = useTelegram();
    const navigate = useNavigate();
    const telegramUsername = user?.username?.toLowerCase() || "devapi1";

    const [filter, setFilter] = useState('all');
    const [sortBy, setSortBy] = useState('newest');

    useEffect(() => {
        myOrders(telegramUsername);
    }, [telegramUsername]);

    const handleRefresh = () => {
        myOrders(telegramUsername);
    };

    const getStatusColor = (status) => {
        const statusColors = {
            "–í —Ä–∞–±–æ—Ç–µ": "#ffff00",
            "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω": "#00e5ff",
            "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π": "#f44336",
            "–ù–µ–¥–æ–∑–≤–æ–Ω": "#9e9e9e",
            "–ù–æ—á–Ω–æ–π": "#1976d2",
            "–ù–æ—á–Ω–æ–π —Ä–∞–Ω–Ω–∏–π": "#bfe1f6",
            "–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ": "#76ff03",
            "–ù—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ": "#ffa726",
            "–û—Ñ–æ—Ä–º–ª–µ–Ω": "#2e7d32",
            "–ü—Ä–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞": "#e6cff1",
            "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞": "#e0e0e0"
        };
        return statusColors[status] || "#e0e0e0";
    };

    const formatDate = (dateStr) => {
        if (!dateStr) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        const date = new Date(dateStr);
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    const formatPhone = (phone) => {
        if (!phone) return "";
        const cleaned = phone.replace(/\D/g, '');
        if (cleaned.length === 10) {
            return `+1 (${cleaned.slice(0,3)}) ${cleaned.slice(3,6)}-${cleaned.slice(6,10)}`;
        }
        return phone;
    };

    const getFilteredOrders = () => {
        if (!orders?.orders) return [];

        let filtered = [...orders.orders];

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if (filter !== 'all') {
            filtered = filtered.filter(order => order.text_status === filter);
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        filtered.sort((a, b) => {
            switch (sortBy) {
                case 'newest':
                    return new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date);
                case 'oldest':
                    return new Date(a.createdAt || a.date) - new Date(b.createdAt || b.date);
                case 'amount-high':
                    return (b.total || 0) - (a.total || 0);
                case 'amount-low':
                    return (a.total || 0) - (b.total || 0);
                default:
                    return 0;
            }
        });

        return filtered;
    };

    const getUniqueStatuses = () => {
        if (!orders?.orders) return [];
        const statuses = orders.orders.map(order => order.text_status).filter(Boolean);
        return [...new Set(statuses)];
    };

    if (isLoading) {
        return (
            <div className="container py-4">
                <div className="position-relative">
                    <button
                        onClick={() => navigate(-1)}
                        style={{
                            position: 'absolute',
                            left: '16px',
                            background: '#fff',
                            padding: '2px',
                            fontSize: '20px',
                            cursor: 'pointer',
                            zIndex: 1000,
                            border: '0px'
                        }}
                    >
                        <IoArrowBack />
                    </button>
                    <div className="row gap-3">
                        <Header />
                    </div>
                </div>
                <div className="d-flex justify-content-center align-items-center" style={{minHeight: '300px'}}>
                    <div className="text-center">
                        <div className="spinner-border text-primary mb-3" role="status">
                            <span className="visually-hidden">Loading...</span>
                        </div>
                        <p className="text-muted">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã...</p>
                    </div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="container py-4">
                <div className="position-relative">
                    <button
                        onClick={() => navigate(-1)}
                        style={{
                            position: 'absolute',
                            left: '16px',
                            background: '#fff',
                            padding: '2px',
                            fontSize: '20px',
                            cursor: 'pointer',
                            zIndex: 1000,
                            border: '0px'
                        }}
                    >
                        <IoArrowBack />
                    </button>
                    <div className="row gap-3">
                        <Header />
                    </div>
                </div>
                <div className="alert alert-danger mt-4" role="alert">
                    <h4 className="alert-heading">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h4>
                    <p className="mb-3">{error}</p>
                    <hr />
                    <button
                        className="btn btn-outline-danger"
                        onClick={handleRefresh}
                    >
                        <IoRefresh className="me-2" />
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </div>
        );
    }

    const filteredOrders = getFilteredOrders();
    const uniqueStatuses = getUniqueStatuses();

    return (
        <div className="container py-4">
            <div className="position-relative">
                <button
                    onClick={() => navigate(-1)}
                    style={{
                        position: 'absolute',
                        left: '16px',
                        background: '#fff',
                        padding: '2px',
                        fontSize: '20px',
                        cursor: 'pointer',
                        zIndex: 1000,
                        border: '0px'
                    }}
                >
                    <IoArrowBack />
                </button>
                <div className="row gap-3">
                    <Header />
                </div>
            </div>

            <div className="mt-4">
                <div className="d-flex justify-content-between align-items-center mb-4">
                    <h2 className="mb-0">üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>
                    <button
                        className="btn btn-outline-primary btn-sm"
                        onClick={handleRefresh}
                        disabled={isLoading}
                    >
                        <IoRefresh className="me-1" />
                        –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                </div>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                {orders && (
                    <div className="row mb-4">
                        <div className="col-md-4">
                            <div className="card text-center h-100">
                                <div className="card-body">
                                    <h5 className="card-title text-primary">
                                        <IoCard className="me-2" />
                                        –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤
                                    </h5>
                                    <h3 className="text-primary mb-0">{orders.count || 0}</h3>
                                </div>
                            </div>
                        </div>
                        <div className="col-md-4">
                            <div className="card text-center h-100">
                                <div className="card-body">
                                    <h5 className="card-title text-success">
                                        <IoCheckmarkCircle className="me-2" />
                                        –ó–∞–≤–µ—Ä—à–µ–Ω–æ
                                    </h5>
                                    <h3 className="text-success mb-0">
                                        {orders.orders?.filter(o => o.text_status === '–û—Ñ–æ—Ä–º–ª–µ–Ω').length || 0}
                                    </h3>
                                </div>
                            </div>
                        </div>
                        <div className="col-md-4">
                            <div className="card text-center h-100">
                                <div className="card-body">
                                    <h5 className="card-title text-warning">
                                        <IoTimeOutline className="me-2" />
                                        –í —Ä–∞–±–æ—Ç–µ
                                    </h5>
                                    <h3 className="text-warning mb-0">
                                        {orders.orders?.filter(o => o.text_status === '–í —Ä–∞–±–æ—Ç–µ').length || 0}
                                    </h3>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
                <div className="row mb-4">
                    <div className="col-md-6">
                        <label className="form-label">–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:</label>
                        <select
                            className="form-select"
                            value={filter}
                            onChange={(e) => setFilter(e.target.value)}
                        >
                            <option value="all">–í—Å–µ –∑–∞–∫–∞–∑—ã</option>
                            {uniqueStatuses.map(status => (
                                <option key={status} value={status}>{status}</option>
                            ))}
                        </select>
                    </div>
                    <div className="col-md-6">
                        <label className="form-label">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                        <select
                            className="form-select"
                            value={sortBy}
                            onChange={(e) => setSortBy(e.target.value)}
                        >
                            <option value="newest">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
                            <option value="oldest">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
                            <option value="amount-high">–ü–æ —Å—É–º–º–µ (–±–æ–ª—å—à–µ)</option>
                            <option value="amount-low">–ü–æ —Å—É–º–º–µ (–º–µ–Ω—å—à–µ)</option>
                        </select>
                    </div>
                </div>

                {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
                {filteredOrders.length > 0 ? (
                    <div className="row">
                        {filteredOrders.map((order, index) => (
                            <div key={order._id || index} className="col-md-6 mb-4">
                                <div className="card h-100 shadow-sm">
                                    <div className="card-header d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>ID: {order.leadId || order.order_id || 'N/A'}</strong>
                                        </div>
                                        <span
                                            className="badge rounded-pill px-3"
                                            style={{
                                                backgroundColor: getStatusColor(order.text_status),
                                                color: '#000',
                                                fontSize: '0.8em'
                                            }}
                                        >
                                            {order.text_status || '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞'}
                                        </span>
                                    </div>
                                    <div className="card-body">
                                        <h5 className="card-title">
                                            <IoPerson className="me-2 text-primary" />
                                            {order.leadName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                        </h5>

                                        <div className="mb-2">
                                            <small className="text-muted">
                                                <BsCardText className="me-1" />
                                                –°lient ID:{order.client_id}
                                            </small>
                                        </div>

                                        <div className="mb-2">
                                            <small className="text-muted">
                                                <IoLocation className="me-1" />
                                                {order.address || order.city || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                                            </small>
                                        </div>

                                        <div className="mb-2">
                                            <small className="text-muted">
                                                <IoCalendar className="me-1" />
                                                {formatDate(order.date)}
                                            </small>
                                        </div>

                                        {order.master && (
                                            <div className="mb-2">
                                                <small className="text-muted">
                                                    üë∑‚Äç‚ôÇÔ∏è –ú–∞—Å—Ç–µ—Ä: {order.master}
                                                </small>
                                            </div>
                                        )}

                                        {order.comment && (
                                            <div className="mb-2">
                                                <small className="text-muted fst-italic">
                                                    üí¨ {order.comment}
                                                </small>
                                            </div>
                                        )}

                                        {/* –£—Å–ª—É–≥–∏ */}
                                        {order.services && order.services.length > 0 && (
                                            <div className="mb-3">
                                                <h6 className="text-muted mb-2">–£—Å–ª—É–≥–∏:</h6>
                                                <div className="small">
                                                    {order.services.slice(0, 3).map((service, idx) => (
                                                        <div key={idx} className="d-flex justify-content-between">
                                                            <span>{service.label} (x{service.quantity || 1})</span>
                                                            <span className="fw-bold">{service.price}$</span>
                                                        </div>
                                                    ))}
                                                    {order.services.length > 3 && (
                                                        <small className="text-muted">
                                                            ...–∏ –µ—â–µ {order.services.length - 3} —É—Å–ª—É–≥
                                                        </small>
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                    <div className="card-footer d-flex justify-content-between align-items-center">
                                        <div className="fw-bold text-success fs-5">
                                            üí∞ {order.total || 0}$
                                        </div>
                                        <div className="btn-group" role="group">
                                            <button
                                                className="btn btn-outline-primary btn-sm"
                                                onClick={() => {
                                                    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
                                                    alert(`–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ${order.leadId}:\n${JSON.stringify(order, null, 2)}`);
                                                }}
                                                title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏"
                                            >
                                                <IoEye />
                                            </button>
                                            <button
                                                className="btn btn-outline-warning btn-sm"
                                                onClick={() => navigate(`/change/${order.order_id}`)}
                                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                                            >
                                                <IoCreate />
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                ) : (
                    <div className="text-center py-5">
                        <div className="mb-4">
                            <IoCard size={64} className="text-muted" />
                        </div>
                        <h4 className="text-muted">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                        <p className="text-muted">
                            {filter === 'all'
                                ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤'
                                : `–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${filter}"`
                            }
                        </p>
                        <button
                            className="btn btn-primary"
                            onClick={() => navigate('/order-change')}
                        >
                            <IoCreate className="me-2" />
                            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default OwnOrders;