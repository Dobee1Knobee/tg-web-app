import { useState } from "react";

export const useSubmitOrder = () => {
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const [response, setResponse] = useState(null);

    const submitOrder = async (payload) => {
        setIsLoading(true);
        setError(null);
        setResponse(null);
        if (payload.services && Array.isArray(payload.services)) {
            const invalidService = payload.services.find(s =>
                (s.count && !s.diagonal) || (s.diagonal && !s.count)
            );
            if (invalidService) {
                setIsLoading(false);
                return setError("–ù–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
            }
        }


        try {
            const res = await fetch("https://bot-crm-backend-756832582185.us-central1.run.app/api/addOrder", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            const data = await res.json();

            if (!res.ok) {
                throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
            }

            setResponse(data);
            return data;
        } catch (err) {
            setError(err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
            return null;
        } finally {
            setIsLoading(false);
        }
    };

    // üÜï –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–æ—Ä–º—ã
    const linkFormToOrder = async (at, formId, orderId) => {
        try {
            console.log(`üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É ${formId} –∫ –∑–∞–∫–∞–∑—É ${orderId}`);

            const res = await fetch("https://bot-crm-backend-756832582185.us-central1.run.app/api/user/takeFormToOrder", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    at: at,
                    form_id: formId,
                    order_id: orderId
                }),
            });

            const data = await res.json();

            if (!res.ok) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–æ—Ä–º—É:', data.error);
                return { success: false, error: data.error };
            }

            console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞');
            return { success: true, data };
        } catch (err) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–æ—Ä–º—ã:', err.message);
            return { success: false, error: err.message };
        }
    };

    return {
        submitOrder,
        linkFormToOrder, // üÜï –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        isLoading,
        error,
        response,
    };
};